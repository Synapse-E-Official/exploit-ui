using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;


namespace exploit_ui_kali
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        Storyboard StoryBoard = new Storyboard();
        TimeSpan duration = TimeSpan.FromMilliseconds(500);
        TimeSpan duration2 = TimeSpan.FromMilliseconds(1000);


        private IEasingFunction Smooth
        {
            get;
            set;
        }
        = new QuarticEase
        {
            EasingMode = EasingMode.EaseInOut
        };

        public async void ObjectFadeIn(DependencyObject Object)
        {
            DoubleAnimation FadeIn = new DoubleAnimation()
            {
                From = 0.0,
                To = 1.0,
                Duration = new Duration(duration),
            };
            Storyboard.SetTarget(FadeIn, Object);
            Storyboard.SetTargetProperty(FadeIn, new PropertyPath("Opacity", 1));
            StoryBoard.Children.Add(FadeIn);
            StoryBoard.Begin();
            await Task.Delay(500);
            StoryBoard.Children.Remove(FadeIn);
        }

        public async void ObjectFadeOut(DependencyObject Object)
        {
            DoubleAnimation Fade = new DoubleAnimation()
            {
                From = 1.0,
                To = 0.0,
                Duration = new Duration(duration),
            };
            Storyboard.SetTarget(Fade, Object);
            Storyboard.SetTargetProperty(Fade, new PropertyPath("Opacity", 1));
            StoryBoard.Children.Add(Fade);
            StoryBoard.Begin();
            await Task.Delay(500);
            StoryBoard.Children.Remove(Fade);
        }

        public async void ChangePosition(DependencyObject Object, Thickness Get, Thickness Set)
        {
            ThicknessAnimation Animation = new ThicknessAnimation()
            {
                From = Get,
                To = Set,
                Duration = duration2,
                EasingFunction = Smooth,
            };
            Storyboard.SetTarget(Animation, Object);
            Storyboard.SetTargetProperty(Animation, new PropertyPath(MarginProperty));
            StoryBoard.Children.Add(Animation);
            StoryBoard.Begin();
            await Task.Delay(1000);
            StoryBoard.Children.Remove(Animation);
        }

        public MainWindow()
        {
            InitializeComponent();
        }

        private async void LoadingSuccess(object sender, RoutedEventArgs e)
        {
            
            ObjectFadeIn(this);
            ChangePosition(InputField, new Thickness(10, 28, 10, -10), new Thickness(10, 10, 10, 8));
            await Task.Delay(1000);
            //ChangePosition(InputField, new Thickness(10, 28, 10, -10), new Thickness(10, 10, 10, 8));
            //ChangePosition(InputField, InputField.Margin, new Thickness(10, 10, 10, 8));
        }

        private void LoginButton_Copy1_Click(object sender, RoutedEventArgs e)
        {
            //string keyDestination = "https://pastebin.com/raw/4cradbgy";
            System.Diagnostics.Process.Start("https://pastebin.com/raw/4cradbgy");
        }

        private async void LoginButton_Copy_Click(object sender, RoutedEventArgs e)
        {
            string correctKey = "login-key";
            if (keyBox.Text == correctKey)
            {
                //MessageBox.Show("Your key is correct!");
                ObjectFadeOut(InputField);
                ChangePosition(InputField, InputField.Margin, new Thickness(118, 62, 119, 61));
                await Task.Delay(1000);
                this.ObjectFadeOut(this);
                await Task.Delay(1000);
                ExploitWindow exploit_win = new ExploitWindow();
                exploit_win.Show();
                this.Hide();
            }
            else
            {
                MessageBox.Show("Your key is incorrect!", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                //Environment.Exit(0);
            }
        }

        private async void LoginButton_Copy2_Click(object sender, RoutedEventArgs e)
        {
            ObjectFadeOut(InputField);
            ChangePosition(InputField, InputField.Margin, new Thickness(118, 62, 119, 61));
            await Task.Delay(1000);
            this.ObjectFadeOut(this);
            await Task.Delay(1000);
            Environment.Exit(0);
        }

        private void LoginButton_Copy3_Click(object sender, RoutedEventArgs e)
        {
            this.WindowState = WindowState.Minimized;
        }

        private void MainBorder_MouseDown(object sender, MouseButtonEventArgs e)
        {
            try
            {
                this.DragMove();
            }
            catch
            {

            }
        }
    }
}
