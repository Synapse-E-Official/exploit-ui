using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Windows.Media.Animation;

namespace exploit_ui_kali
{
    /// <summary>
    /// Interaction logic for ExploitWindow.xaml
    /// </summary>
    public partial class ExploitWindow : Window
    {

        Storyboard StoryBoard = new Storyboard();
        TimeSpan duration = TimeSpan.FromMilliseconds(500);
        TimeSpan duration2 = TimeSpan.FromMilliseconds(1000);


        private IEasingFunction Smooth
        {
            get;
            set;
        }
        = new QuarticEase
        {
            EasingMode = EasingMode.EaseInOut
        };

        public async void ObjectFadeIn(DependencyObject Object)
        {
            DoubleAnimation FadeIn = new DoubleAnimation()
            {
                From = 0.0,
                To = 1.0,
                Duration = new Duration(duration),
            };
            Storyboard.SetTarget(FadeIn, Object);
            Storyboard.SetTargetProperty(FadeIn, new PropertyPath("Opacity", 1));
            StoryBoard.Children.Add(FadeIn);
            StoryBoard.Begin();
            await Task.Delay(500);
            StoryBoard.Children.Remove(FadeIn);
        }

        public async void ObjectFadeOut(DependencyObject Object)
        {
            DoubleAnimation Fade = new DoubleAnimation()
            {
                From = 1.0,
                To = 0.0,
                Duration = new Duration(duration),
            };
            Storyboard.SetTarget(Fade, Object);
            Storyboard.SetTargetProperty(Fade, new PropertyPath("Opacity", 1));
            StoryBoard.Children.Add(Fade);
            StoryBoard.Begin();
            await Task.Delay(500);
            StoryBoard.Children.Remove(Fade);
        }

        public async void ChangePosition(DependencyObject Object, Thickness Get, Thickness Set)
        {
            ThicknessAnimation Animation = new ThicknessAnimation()
            {
                From = Get,
                To = Set,
                Duration = duration2,
                EasingFunction = Smooth,
            };
            Storyboard.SetTarget(Animation, Object);
            Storyboard.SetTargetProperty(Animation, new PropertyPath(MarginProperty));
            StoryBoard.Children.Add(Animation);
            StoryBoard.Begin();
            await Task.Delay(1000);
            StoryBoard.Children.Remove(Animation);
        }

        public ExploitWindow()
        {
            InitializeComponent();
        }

        private async void LoadingSuccess(object sender, RoutedEventArgs e)
        {
            ObjectFadeIn(this);
            //ChangePosition(EditorBorder, new Thickness(-54, 31, 183, 37), new Thickness(4, 28, 125, 40));
            //ChangePosition(ListboxBorder, new Thickness(508, 26, -39, 42), new Thickness(465, 28, 4, 40));
            //ChangePosition(ControlField, new Thickness(75, 295, 4, 4), new Thickness(4, 295, 4, 4));
            await Task.Delay(1000);
        }

        private void LoginButton_Copy2_Click(object sender, RoutedEventArgs e)
        {
            //ObjectFadeOut(EditorBorder);
            //ObjectFadeOut(ListboxBorder);
            //ObjectFadeOut(ControlField);
            //button fadeout
            ObjectFadeOut(SettingsButton);
            //margin when menu shows 0,10,439,10
            ChangePosition(SettingsMenu, SettingsMenu.Margin, new Thickness(0, 10, 439, 10));
            //margin in resting position -163,10,612,10
        }

        private void Window_MouseDown(object sender, MouseButtonEventArgs e)
        {
            try
            {
                this.DragMove();
            }
            catch
            {

            }
        }

        private void AttachButton_Copy_Click(object sender, RoutedEventArgs e)
        {
            ObjectFadeIn(SettingsButton);
            ChangePosition(SettingsMenu, SettingsMenu.Margin, new Thickness(-163, 10, 612, 10));
            
        }

        private async void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            ObjectFadeOut(this);
            await Task.Delay(1000);
            Environment.Exit(0);
        }

        private void MinimizeButton_Click(object sender, RoutedEventArgs e)
        {
            this.WindowState = WindowState.Minimized;           
        }

        private void InjectButton_Click(object sender, RoutedEventArgs e)
        {
            //for anyone confused, this is the inject / attach button. 
        }
    }
}
